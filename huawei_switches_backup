#!/usr/bin/env python3

import os
import datetime
from netmiko import ConnectHandler

# Путь к домашнему каталогу, IP-адрес TFTP-сервера, путь к конфигурационному файлу TFTP-сервера

HOME_LINK = '/backups/'
TFTP_IP = '172.31.4.14'
TFTP_CONFIG = '/etc/default/tftpd-hpa'
FILENAME = 'vrpcfg.zip'

# IP-адреса устройств, с которых собираем конфигурационные файлы

DEVICES_IP = {
'OTR-CORE' : '172.31.0.3',
'USIT-RSW' : '172.31.0.250',
'USIT-ASW' : '172.31.0.249',
'DTA-RSW'  : '172.31.0.251',
# 'SW-USIT-STACK-F' : '172.31.0.8'
 }

# Каталог по умолчанию для TFTP

folder = str(datetime.date.today())
path = '"' + HOME_LINK + folder + '"'

# Редактирование конфигурационного файла TFTP-сервера с учётом изменения каталога по умолчанию. Каталог именуется по текущей дате

def edit():
    str1 = 'TFTP_USERNAME="tftp"'
    str2 = 'TFTP_ADDRESS="0.0.0.0:69"'
    str3 = 'TFTP_OPTIONS="--secure --create"'

    with open(TFTP_CONFIG) as cfg:
        for line in cfg:
            if line.startswith('TFTP_DIRECTORY'):
                break
    sett = line.split('=')[1].strip()
    line = line.replace(sett,path)

    with open(TFTP_CONFIG, 'w') as cfg:
        cfg.write(str1)
        cfg.write('\n' + str2)
        cfg.write('\n' + str3)
        cfg.write('\n' + line)

# Здесь создаётся папка, куда складываются конфиги, и перезапускается служба TFTP

def tftp_start():
    os.mkdir(HOME_LINK + folder)
    os.system('chown tftp:tftp ' + HOME_LINK + folder)
    os.system('chmod 766 ' + HOME_LINK + folder)
    os.system('systemctl start tftpd-hpa')

# Копирование конфигурационных файлов с сетевых устройств, используем библиотеку netmiko

def copy_config():
    for NAME, IP in DEVICES_IP.items():
        DEVICES_PARAMS = {
            'device_type'           : 'huawei',
            'ip'                    :  IP,
            'username'              : 'admin',
            'password'              : 'password',
            'global_delay_factor'   : 2, 
	    'read_timeout_override': 90  }

        connect = ConnectHandler(**DEVICES_PARAMS)
        connect.find_prompt()
        connect.send_command(f'tftp {TFTP_IP} put {FILENAME} {str(IP)}-{NAME}-{FILENAME}')
        connect.disconnect()
    os.system('systemctl stop tftpd-hpa')

def main():
    edit()
    tftp_start()
    copy_config()

if __name__ == '__main__':
    main()
